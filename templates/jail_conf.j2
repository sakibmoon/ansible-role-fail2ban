# Ansible managed

[DEFAULT]

# "ignoreself" specifies whether the local resp. own IP addresses should be ignored
# (default is true). Fail2ban will not ban a host which matches such addresses.
ignoreself = {{ fail2ban_ignoreself }}

{% if fail2ban_ignoreip is defined %}
# "ignoreip" can be a list of IP addresses, CIDR masks or DNS hosts. Fail2ban
# will not ban a host which matches an address in this list. Several addresses
# can be defined using space (and/or comma) separator.
#ignoreip = 127.0.0.1/8 ::1
ignoreip = {{ fail2ban_ignoreip }}
{% endif %}

# provide cache parameters (default disabled) for ignore failure check
# (caching of the result from `ignoreip`, `ignoreself` and `ignorecommand`),
# syntax:
#        ignorecache = key="<F-USER>@<ip-host>", max-count=100, max-time=5m
#        ignorecommand = if [ "<F-USER>" = "technical" ] && [ "<ip-host>" = "my-host.example.com" ]; then exit 0; fi;
#                        exit 1
# This will cache the result of ignorecommand (does not call it repeatedly)
# for 5 minutes (cache time) for maximal 100 entries (cache size),
# using values substituted like "user@host" as cache-keys.
# Set option ignorecache to empty value disables the cache.
ignorecache = {{ fail2ban_ignorecache }}

{% if fail2ban_ignorecommand is defined %}
# External command that will take an tagged arguments to ignore, e.g. <ip>,
# and return true if the IP is to be ignored. False otherwise.
#
# ignorecommand = /path/to/command <ip>
ignorecommand = {{ fail2ban_ignorecommand }}
{% endif %}

# "bantime" is the number of seconds that a host is banned.
bantime = {{ fail2ban_bantime }}

# A host is banned if it has generated "maxretry" during the last "findtime"
# seconds.
findtime = {{ fail2ban_findtime }}

# "maxretry" is the number of failures before a host get banned.
maxretry = {{ fail2ban_maxretry }}

# "backend" specifies the backend used to get files modification.
# Available options are "pyinotify", "gamin", "polling", "systemd" and "auto".
# This option can be overridden in each jail as well.
#
# pyinotify: requires pyinotify (a file alteration monitor) to be installed.
#              If pyinotify is not installed, Fail2ban will use auto.
# gamin:     requires Gamin (a file alteration monitor) to be installed.
#              If Gamin is not installed, Fail2ban will use auto.
# polling:   uses a polling algorithm which does not require external libraries.
# systemd:   uses systemd python library to access the systemd journal.
#              Specifying "logpath" is not valid for this backend.
#              See "journalmatch" in the jails associated filter config
# auto:      will try to use the following backends, in order:
#              pyinotify, gamin, polling.
#
# Note: if systemd backend is chosen as the default but you enable a jail
#       for which logs are present only in its own log files, specify some other
#       backend for that jail (e.g. polling) and provide empty value for
#       journalmatch. See https://github.com/fail2ban/fail2ban/issues/959#issuecomment-74901200
backend = {{ fail2ban_backend }}

# "usedns" specifies if jails should trust hostnames in logs,
#   warn when DNS lookups are performed, or ignore all hostnames in logs
#
# yes:   if a hostname is encountered, a DNS lookup will be performed.
# warn:  if a hostname is encountered, a DNS lookup will be performed,
#        but it will be logged as a warning.
# no:    if a hostname is encountered, will not be used for banning,
#        but it will be logged as info.
# raw:   use raw value (no hostname), allow use it for no-host filters/actions (example user)
usedns = {{ fail2ban_usedns }}

# "logencoding" specifies the encoding of the log files handled by the jail
#   This is used to decode the lines from the log file.
#   Typical examples:  "ascii", "utf-8"
#
#   auto:   will use the system locale setting
logencoding = auto

# "mode" defines the mode of the filter (see corresponding filter implementation for more info).
mode ={{ fail2ban_mode }}

# "filter" defines the filter to use by the jail.
#  By default jails have names matching their filter name
#
filter = {{ fail2ban_filter }}

{% if fail2ban_logtimzeone is defined %}
# Force the time zone for log lines that don't have one.
# If this option is not specified, log lines from which no
# explicit time zone has been found are interpreted by fail2ban
# in its own system time zone, and that may turn to be inappropriate.
# While the best practice is to configure the monitored applications to include
# explicit offsets, this option is meant to handle cases where that is not possible.
# The supported time zones in this option are those with fixed offset: Z, UTC[+-]hhmm (you can also use GMT as an alias to UTC).
# This option has no effect on log lines on which an explicit time zone has been found. 
# Examples:
#        logtimezone = UTC
#        logtimezone = UTC+0200
#        logtimezone = GMT-0100
logtimezone = {{ fail2ban_logtimezone }}
{% endif %}

# Default banning action (e.g. iptables, iptables-new,
# iptables-multiport, shorewall, etc) It is used to define
# action_* variables. Can be overridden globally or per
# section within jail.local file
{% if fail2ban_banaction is defined %}
banaction = {{ fail2ban_banaction }}
{% endif %}

{% if fail2ban_banaction_allports is defined %}
banaction_allports = {{ fail2ban_banaction_allports }}
{% endif %}

# Choose default action.  To change, just override value of 'action' with the
# interpolation to the chosen action shortcut (e.g.  action_mw, action_mwl, etc) in jail.local
# globally (section [DEFAULT]) or per specific section
action = {{ fail2ban_action }}

{% if fail2ban_failregex is defined %}
# regex (Python regular expression) to be added to the filter's failregexes
# (see failregex in section FILTER FILES for details).
# If this is useful for others using your application please share
# your regular expression with the fail2ban developers by reporting an issue
failregex = {{ fail2ban_failregex }}
{% endif %}

{% if fail2ban_ignoreregex is defined %}
# regex which, if the log line matches, would cause Fail2Ban not consider that line.
# This line will be ignored even if it matches a failregex of the jail or any of its filters.
ignoreregex = {{ fail2ban_ignoreregex }}
{% endif %}

{% if fail2ban_maxmatches is defined %}
# max number of matched log-lines the jail would hold in memory per ticket.
# By default it is the same value as maxretry of jail (or default).
# This option also affects values resolvable via tag <matches> in actions.
maxmatches = {{ fail2ban_maxmatches }}
{% endif %}
